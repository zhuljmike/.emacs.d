* interface tweaks
#+begin_src emacs-lisp
   (setq inhibit-startup-message t)
   (tool-bar-mode -1)
   (fset 'yes-or-no-p 'y-or-n-p)
#+end_src
* try
  #+begin_src emacs-lisp
    (use-package try
      :ensure t)
  #+end_src

* which key
  #+begin_src emacs-lisp
    (use-package which-key
    :ensure t
    :config
    (which-key-mode))
  #+end_src

* org mode
  #+begin_src emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+end_src

* Swiper/ivy/counsel
  #+begin_src emacs-lisp
    (use-package counsel
      :ensure t
      :bind
      (("M-y"  . counsel-yank-pop)
       :map ivy-minibuffer-map
       ("M-y"  . ivy-next-line)))
    (use-package ivy
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b"   .  ivy-switch-buffer))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "%d/%d ")
      (setq ivy-display-style 'fancy))

    (use-package swiper
      :ensure t
      :bind (("C-s" . swiper-isearch)
	     ("C-r" . swiper-isearch)
	     ("C-c C-r" . ivy-resume)
	     ("M-x" . counsel-M-x)
	     ("C-x C-f" . counsel-find-file))
      :config
      (progn
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq ivy-display-style 'fancy)
	(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	))
  #+end_src

  * Avy-navigate by searching for a letter on the screen and jumping to it
  #+begin_src emacs-lisp
    (use-package avy
      :ensure t
      :config
      (avy-setup-default)
      :bind("M-s"  . avy-goto-word-1)) ;; changed from char as per jcs
  #+end_src
* Company
  #+begin_src emacs-lisp
    (use-package company
      :ensure t
      :config
      (setq company-idle-delay 0)
      (setq company-minimum-prefix-length 3)
      (global-company-mode t))
    (defun my/python-mode-hook ()
      (add-to-list 'company-mode-hook 'my/python-mode-hook)
      (use-package company-jedi
	:ensure t
	:config
	(add-hook 'python-mode-hook 'jedi:setup)
	)
  #+end_src
* Smex
  Smex is a M-x enhancement for emacs,built on top of Ido, it provide a convenient interface to your recently and most frequently used commands.
  #+begin_src emacs-lisp
    (use-package smex
      :ensure t
      :config
      (global-set-key (kbd "M-x") 'smex)
      (global-set-key (kbd "M-x") 'smex-major-mode-commands)
      )
  #+end_src

